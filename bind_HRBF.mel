// How to skin:
// 1) select some bone on skeleton
// 2) select mesh
// 3) skin by running bind_HRBFskin(). MAKE SURE YOUR SKELETON POSE MATCHES MESH POSE
// 4) reimport weights

proc connectJointCluster( string $jointName, int $i, string $skinClusterName, int $parent_idx )
{
    /* not sure what this does, but it breaks some kinds of binds and the attribute
       seems to be off for binding to FBX import skeletons anyway.
       
    if ( objExists( $jointName+".lockInfluenceWeights1" ) == false )
    {
        select -r $jointName;
        addAttr -sn "liw" -ln "lockInfluenceWeights1" -at "bool";
    }
    
    connectAttr ($jointName+".liw") ($skinClusterName + ".lockWeights["+$i+"]"); */
    
    print("linking " + $jointName + "\n");

    connectAttr ($jointName+".worldMatrix[0]") ($skinClusterName + ".matrix["+$i+"]");
    connectAttr ($jointName+".objectColorRGB") ($skinClusterName + ".influenceColor["+$i+"]");
	float $m[] = `getAttr ($jointName+".wim")`;
	setAttr ($skinClusterName + ".bindPreMatrix["+$i+"]") -type "matrix" $m[0] $m[1] $m[2] $m[3] $m[4] $m[5] $m[6] $m[7] $m[8] $m[9] $m[10] $m[11] $m[12] $m[13] $m[14] $m[15];
    setAttr ($skinClusterName + ".parentJointIDCS["+$i+"]") $parent_idx;
}

proc get_skeleton_hierarchy(string $jointNames[], int $parentIndices[]) {
    /*
    Input jointNames is a list of skeleton bones as they will be passed into
    the node.
    parentIndices will be written to contain the parent index of each bone.
    */

    int $numJoints = size($jointNames);
    for ($i = 0; $i < $numJoints; $i++) {
        //print($jointNames[$i]);
        string $parentName[] = `listRelatives -p $jointNames[$i]`;
        $parentIndices[$i] = -1; // default for root
        for ($j = 0; $j < $numJoints; $j++) {
            // walk over the list and find index of parent
            if ($jointNames[$j] == $parentName[0]) {
                $parentIndices[$i] = $j;
                continue;
            }
        }
    }
}

proc get_joints_DF(string $rootName, string $jointNames[]) {
    /* test with:

    string $rootName = "Hips";
    string $dft[];
    get_joints_DF($rootName, $dft);

    for ($i = 0; $i < size($dft); $i++) {
        print($dft[$i] + "\n");
    }
    */


    // check to make sure we have the root
    string $rels[] = `listRelatives -p $rootName`;
    if (size($rels) > 0) {
        print("ERROR! PLEASE SELECT THE ROOT OF THE SKELETON!");
        return;
    }
    // perform DF traversal using a fake stack
    int $numJoints = size(`listRelatives -ad $rootName`);

    string $dfStack[];
    int $stackTop = 1;
    $dfStack[0] = $rootName;
    int $jointNamesIDX = 0;
    while ($jointNamesIDX < $numJoints) {
        // pop off the stack
        string $popped = $dfStack[$stackTop - 1];
        $stackTop--;

        // stick on the explored queue
        $jointNames[$jointNamesIDX] = $popped;
        $jointNamesIDX++;

        // get children
        string $children[] = `listRelatives -c $popped`;
        int $numChildren = size($children);
        // btw we need to reverse the children, or this doesn't match Maya's DFT
        string $swap;
        for ($i = 0; $i < $numChildren / 2; $i++) {
            $swap = $children[$i];
            $children[$i] = $children[$numChildren - 1 - $i];
            $children[$numChildren - 1 - $i] = $swap;
        }

        // push em on the stack
        for ($i = 0; $i < $numChildren; $i++) {
            $dfStack[$stackTop] = $children[$i];
            $stackTop++;
        }
    }
}

proc bind_HRBFskin() {
    string $selectedNodes[] = `ls -sl`; // get selected nodes
    print($selectedNodes); // debug

    // get a joint
    string $rootJointName;
    // walk over everything selected
    // select a root joint
    for ($i = 0; $i < size($selectedNodes); $i++) {
        if (`objectType $selectedNodes[$i]` == "joint") {
            $rootJointName = $selectedNodes[$i];
            break;
        }
    }

    // make sure what was selected was the root
    string $rels[] = `listRelatives -p $rootJointName`;
    if (size($rels) > 0) {
        print("ERROR! PLEASE SELECT THE ROOT OF THE SKELETON!");
        return;
    }

    // get joints in a hierarchy
    string $jointsHierarchy[];
    int $parentIndices[];

    /*
    $jointsHierarchy[0] = $rootJointName;
    string $otherJoints[] = `listRelatives -ad $rootJointName`;
    int $numJoints = size($otherJoints) + 1;
    for ($i = 0; $i < $numJoints - 1; $i++) {
        $jointsHierarchy[$i + 1] = $otherJoints[$i];
    } */

    get_joints_DF($rootJointName, $jointsHierarchy);
    int $numJoints = size($jointsHierarchy);

    get_skeleton_hierarchy($jointsHierarchy, $parentIndices);

    // debug
    //print($jointsHierarchy[0] + "\n");
    for ($i = 0; $i < $numJoints; $i++) {
        print($i + ": " + $jointsHierarchy[$i] + " " + $parentIndices[$i] + "\n");
    }

    // get the mesh
    string $meshName;
    for ($i = 0; $i < size($selectedNodes); $i++) {
        if (`objectType $selectedNodes[$i]` == "transform") {
            $meshName = $selectedNodes[$i] + "Shape";
            break;
        }
    }
    // select the mesh
    print("selecting " + $meshName + "\n");
    select -r $meshName;
    
    // make the skin node
    string $clusterStr[] = `deformer -type "HRBFSkinCluster"`;
    print($clusterStr);
    string $skinClusterName = $clusterStr[0];

    // link up
    for ($i = 0; $i < $numJoints; $i++) {
        connectJointCluster( $jointsHierarchy[$i], $i, $skinClusterName, $parentIndices[$i]);
    }

    //setAttr ($skinClusterName + ".ParentJointIDCS") -type "Int32Array" $parentIndices;
}


